/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package myproject.tijada_oop;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import myproject.tijada_oop.SMS_DB.Connect_DB;

/**
 *
 * @author jomsa
 */
public class SearchCourse extends javax.swing.JDialog {

    /**
     * Creates new form Search_Student
     */
    public SearchCourse(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setResizable(false);
        Table_edit model = new Table_edit(
        new Object[][]{}, 
        new String[]{"Code", "Description", "Type", "Specialization", "Department"}
        );
        searchTable.setModel(model);
        
        loadAllData();// Loads all data immediately
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void loadAllData() {// Shows all the course whenever the search appears
        String sqlQuery = "SELECT course_code, description, course_type, spec, dept"
                        + " FROM course";


        try (Connection con = Connect_DB.connect();
            PreparedStatement pst = con.prepareStatement(sqlQuery);
            ResultSet rs = pst.executeQuery()) {

            DefaultTableModel model = (DefaultTableModel) searchTable.getModel();
            model.setRowCount(0); // Clear existing rows

            while (rs.next()) {
                model.addRow(new Object[] {
                    rs.getString("course_code"),
                    rs.getString("description"),
                    rs.getString("course_type"),
                    rs.getString("spec"),
                    rs.getString("dept")
                });
            }

        } catch (SQLException e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Error loading professor data: " + e.getMessage());
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        searchFilter = new javax.swing.ButtonGroup();
        searchPnl = new javax.swing.JPanel();
        searchTxtBx = new javax.swing.JTextField();
        searchBttn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        editBttn = new javax.swing.JButton();
        delBttn = new javax.swing.JButton();
        searchResTbl = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Course", "Year", "Section"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        searchPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Course", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 24))); // NOI18N

        searchTxtBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTxtBxActionPerformed(evt);
            }
        });

        searchBttn.setText("Search");
        searchBttn.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                searchBttnAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        searchBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBttnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPnlLayout = new javax.swing.GroupLayout(searchPnl);
        searchPnl.setLayout(searchPnlLayout);
        searchPnlLayout.setHorizontalGroup(
            searchPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchTxtBx, javax.swing.GroupLayout.PREFERRED_SIZE, 745, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        searchPnlLayout.setVerticalGroup(
            searchPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchTxtBx)
                    .addComponent(searchBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        editBttn.setText("Edit");
        editBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBttnActionPerformed(evt);
            }
        });

        delBttn.setText("Delete");
        delBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBttnActionPerformed(evt);
            }
        });

        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Code", "Description", "Type", "Specialization", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchResTbl.setViewportView(searchTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(352, 352, 352)
                .addComponent(editBttn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delBttn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchResTbl)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchResTbl, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBttn)
                    .addComponent(delBttn))
                .addGap(0, 2, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTxtBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTxtBxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTxtBxActionPerformed

    private void searchBttnAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_searchBttnAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBttnAncestorAdded

    private void searchBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBttnActionPerformed
        // TODO add your handling code here:
        String keyword = searchTxtBx.getText().trim();

        String sqlQuery = buildSqlQuery(keyword);

        try (Connection con = Connect_DB.connect();
            PreparedStatement pst = con.prepareStatement(sqlQuery)) {

            setQueryParameters(pst, keyword);

            ResultSet rs = pst.executeQuery();
            populateTable(rs);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchBttnActionPerformed

    private void delBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBttnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) searchTable.getModel();
        int[] selectedRows = searchTable.getSelectedRows(); // Get selected rows

        if (selectedRows.length == 0) {
            showMessage("Please select at least one row to delete.");
            return;
        }

        if (!confirmDeletion()) {
            return;
        }

        try (Connection con = Connect_DB.connect()) {
            con.setAutoCommit(false); // Start transaction

            // Prepare delete statements
            try {
                for (int row : selectedRows) {
                    String course_code = (String) model.getValueAt(row, 0); // Get the course_code from the table
                    deleteCourse(con, course_code);
                }

                con.commit(); // Commit the transaction
                removeRowsFromTable(model, selectedRows);
                showMessage("Selected row(s) deleted successfully.");
            } catch (SQLException e) {
                con.rollback(); // Rollback transaction in case of error
                throw e;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            showMessage("Error deleting row(s): " + e.getMessage());
        }
    }//GEN-LAST:event_delBttnActionPerformed

    private void editBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBttnActionPerformed
        // TODO add your handling code here:
        EditCourse edit = new EditCourse(this, true);
        edit.setVisible(true);
    }//GEN-LAST:event_editBttnActionPerformed

    private String buildSqlQuery(String keyword) {
        StringBuilder sqlQuery = new StringBuilder("SELECT course_code, description, course_type, spec, dept "
                                                + "FROM course ");

        boolean hasKeyword = !keyword.isEmpty();

        if (hasKeyword) {
            sqlQuery.append("WHERE "); // Start the WHERE clause
            sqlQuery.append("(course_code LIKE ? OR description LIKE ? OR course_type LIKE ? OR spec LIKE ? OR dept LIKE ?)"); // Use correct columns
        }

        return sqlQuery.toString();
    }
    
    private void setQueryParameters(PreparedStatement pst, String keyword) throws SQLException {
        int parameterIndex = 1;

        if (!keyword.isEmpty()) {
            String likeKeyword = "%" + keyword + "%";
            pst.setString(parameterIndex++, likeKeyword);  // course_code
            pst.setString(parameterIndex++, likeKeyword);  // description
            pst.setString(parameterIndex++, likeKeyword);  // course_type
            pst.setString(parameterIndex++, likeKeyword);  // spec
            pst.setString(parameterIndex++, likeKeyword);  // dept
        }
    }
    
    private void populateTable(ResultSet rs) throws SQLException {
        DefaultTableModel model = (DefaultTableModel) searchTable.getModel();
        model.setRowCount(0); // Clear existing rows

        while (rs.next()) {
            model.addRow(new Object[] {
                rs.getString("course_code"),
                rs.getString("description"),
                rs.getString("course_type"),
                rs.getString("spec"),
                rs.getString("dept")
            });
        }
    }
    
    private boolean confirmDeletion() {
        int confirm = javax.swing.JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete the selected row(s)? This action cannot be undone.", 
            "Confirm Deletion", 
            javax.swing.JOptionPane.YES_NO_OPTION);
        return confirm == javax.swing.JOptionPane.YES_OPTION;
    }
    
    private void deleteCourse(Connection con, String course_code) throws SQLException {
        String query =  "DELETE FROM course WHERE course_code = ?";

        try (PreparedStatement pst = con.prepareStatement(query)) {
            pst.setString(1, course_code);
            pst.executeUpdate();
        }
    }
    
    private void removeRowsFromTable(DefaultTableModel model, int[] selectedRows) {
        // Remove rows from the table model (reverse order to avoid index issues)
        for (int i = selectedRows.length - 1; i >= 0; i--) {
            model.removeRow(selectedRows[i]);
        }
    }
    
    private void showMessage(String message) {
        javax.swing.JOptionPane.showMessageDialog(this, message);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchCourse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delBttn;
    private javax.swing.JButton editBttn;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton searchBttn;
    private javax.swing.ButtonGroup searchFilter;
    private javax.swing.JPanel searchPnl;
    private javax.swing.JScrollPane searchResTbl;
    private javax.swing.JTable searchTable;
    private javax.swing.JTextField searchTxtBx;
    // End of variables declaration//GEN-END:variables
}
